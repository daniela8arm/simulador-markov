import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter

# --- Estilos CSS inyectados ---
st.markdown(
    """
    <style>
    /* Fondo general y fuente */
    .main {
        background: linear-gradient(135deg, #f0f8ff, #cde9ff);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #003366;
    }
    /* T√≠tulo principal con sombra y padding */
    .title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #004080;
        text-shadow: 1px 1px 4px #a3c1ff;
        padding-bottom: 10px;
        margin-bottom: 10px;
        border-bottom: 2px solid #004080;
    }
    /* Bot√≥n con fondo azul y efecto hover */
    div.stButton > button:first-child {
        background-color: #0078d7;
        color: white;
        border-radius: 10px;
        height: 3em;
        width: 100%;
        font-size: 1.1rem;
        font-weight: 600;
        transition: background-color 0.3s ease;
    }
    div.stButton > button:first-child:hover {
        background-color: #005a9e;
        color: #d1e7ff;
    }
    /* Subt√≠tulos */
    h3 {
        color: #004080;
    }
    /* Labels y radios */
    label, div[role="radiogroup"] {
        font-size: 1.1rem;
        font-weight: 600;
        color: #002244;
    }
    /* Scroll barras de gr√°fico */
    .stPlotlyChart > div {
        overflow-x: auto;
    }
    /* Footer */
    footer {
        font-size: 0.8rem;
        color: #666666;
        padding: 10px;
        text-align: center;
        border-top: 1px solid #cccccc;
        margin-top: 30px;
    }
    </style>
    """, unsafe_allow_html=True
)

# --- T√≠tulo principal ---
st.markdown('<div class="title">üöá Simulador de Delitos en el Metro CDMX con Cadenas de Markov</div>', unsafe_allow_html=True)
st.markdown("---")

# --- Instrucciones ---
st.markdown('''
Este simulador muestra c√≥mo podr√≠an evolucionar los incidentes delictivos **CON violencia** y **SIN violencia** en el Metro de la CDMX a trav√©s de cadenas de Markov.
Puedes comparar distintos escenarios:

üîµ **Escenario base:** Movimiento natural de incidentes seg√∫n datos hist√≥ricos.

üëÆ‚Äç‚ôÇÔ∏è **Con refuerzo policial:** Vigilancia fija en estaciones cr√≠ticas.

üöì **Vigilancia m√≥vil:** Polic√≠a se desplaza anticipando zonas de riesgo.

üß† El modelo genera secuencias basadas en la matriz de transici√≥n de Markov.
''')

# --- Funci√≥n para cargar matrices ---
@st.cache_data
def cargar_matriz(nombre_archivo):
    return pd.read_csv(nombre_archivo, index_col=0)

# Carga matrices
matriz_violencia = cargar_matriz("matriz_transicion_violencia.csv")
matriz_violencia_refuerzo = cargar_matriz("matriz_transicion_violencia_refuerzo.csv")
matriz_violencia_refuerzo_b = cargar_matriz("matriz_violencia_refuerzo_b.csv")
matriz_sin_violencia = cargar_matriz("matriz_transicion_sin_violencia.csv")
matriz_sin_violencia_refuerzo = cargar_matriz("matriz_transicion_sin_violencia_refuerzo.csv")
matriz_sin_violencia_refuerzo_b = cargar_matriz("matriz_sin_violencia_refuerzo_b.csv")

estaciones_media_alta_cv = ['Agr√≠cola Oriental', 'Allende', 'Apatlaco', 'Auditorio', 'Balbuena', 'Buenavista', 'Centro M√©dico', 'Cerro de la Estrella', 'Chilpancingo', 'Ciudad Deportiva', 'Constituci√≥n de 1917', 'Divisi√≥n del Norte', 'Fray Servando', 'General Anaya', 'Insurgentes', 'Moctezuma', 'Observatorio', 'Potrero', 'Puebla', 'Refiner√≠a', 'Revoluci√≥n', 'Ricardo Flores Mag√≥n', 'Santa Anita', 'Tasque√±a', 'Tepalcates', 'Vallejo', 'Villa de Arag√≥n', 'Xola']
estaciones_media_alta_sv = ['Barranca del Muerto', 'Camarones', 'Chapultepec', 'Copilco', 'Coyoac√°n', 'Coyuya', 'Divisi√≥n del Norte', 'Gomez Far√≠as', 'Guelatao', 'Instituto del Petr√≥leo', 'Insurgentes Sur', 'Isabel La Cat√≥lica', 'Iztacalco', 'Jamaica', 'Ju√°rez', 'Lagunilla', 'Mart√≠n Carrera', 'Miguel √Ångel de Quevedo', 'Moctezuma', 'Morelos', 'Nativitas', 'Normal', 'Observatorio', 'Portales', 'Puebla', 'San Joaqu√≠n', 'San Juan de Letr√°n', 'San Pedro de Los Pinos', 'Sevilla', 'Tepalcates', 'Tlatelolco', 'Universidad', 'Viaducto', 'Villa de Arag√≥n', 'Xola', 'Zaragoza']

def simular_cadena_markov(P, estado_inicial, n_pasos):
    estados = [estado_inicial]
    for _ in range(n_pasos - 1):
        estado_actual = estados[-1]
        distribucion = P.loc[estado_actual]
        siguiente_estado = np.random.choice(distribucion.index, p=distribucion.values)
        estados.append(siguiente_estado)
    return estados

def simular_cadena_markov_movil(P, estado_inicial, n_pasos, estaciones_refuerzo):
    estados = [estado_inicial]
    for _ in range(n_pasos - 1):
        estado_actual = estados[-1]
        distribucion = P.loc[estado_actual].copy()
        for est in estaciones_refuerzo:
            if est in distribucion.index:
                distribucion[est] *= 0.5
        distribucion /= distribucion.sum()
        siguiente_estado = np.random.choice(distribucion.index, p=distribucion.values)
        estados.append(siguiente_estado)
    return estados

# --- Layout en columnas ---
col1, col2 = st.columns([1, 2])

with col1:
    tipo_delito = st.radio("**Selecciona tipo de incidente:**", ["CON violencia", "SIN violencia"])
    tipo_simulacion = st.radio("**Selecciona tipo de simulaci√≥n:**", ["Escenario base", "Con refuerzo policial", "Vigilancia m√≥vil"])

    if tipo_delito == "CON violencia":
        estaciones_disponibles = matriz_violencia.index.tolist()
    else:
        estaciones_disponibles = matriz_sin_violencia.index.tolist()

    estacion_inicio = st.selectbox("üìç Estaci√≥n de inicio:", estaciones_disponibles)
    pasos = st.slider("üî¢ N√∫mero de pasos a simular:", min_value=5, max_value=50, value=20)

    # Selecci√≥n de matriz y funci√≥n
    if tipo_delito == "CON violencia":
        if tipo_simulacion == "Escenario base":
            matriz = matriz_violencia
            sim_func = simular_cadena_markov
        elif tipo_simulacion == "Con refuerzo policial":
            matriz = matriz_violencia_refuerzo
            sim_func = simular_cadena_markov
        else:
            matriz = matriz_violencia_refuerzo_b
            sim_func = simular_cadena_markov_movil
            refuerzo_estaciones = estaciones_media_alta_cv
    else:
        if tipo_simulacion == "Escenario base":
            matriz = matriz_sin_violencia
            sim_func = simular_cadena_markov
        elif tipo_simulacion == "Con refuerzo policial":
            matriz = matriz_sin_violencia_refuerzo
            sim_func = simular_cadena_markov
        else:
            matriz = matriz_sin_violencia_refuerzo_b
            sim_func = simular_cadena_markov_movil
            refuerzo_estaciones = estaciones_media_alta_sv

    simular = st.button("Simular")

with col2:
    if 'simular' in locals() and simular:
        if tipo_simulacion == "Vigilancia m√≥vil":
            secuencia = sim_func(matriz, estacion_inicio, pasos, refuerzo_estaciones)
        else:
            secuencia = sim_func(matriz, estacion_inicio, pasos)

        st.markdown(f"### üîÑ Simulaci√≥n: {tipo_delito} - {tipo_simulacion}")
        for i, est in enumerate(secuencia, 1):
            st.write(f"{i}: {est}")

        frecuencia = Counter(secuencia)
        estaciones = list(frecuencia.keys())
        visitas = list(frecuencia.values())

        fig, ax = plt.subplots(figsize=(12, 6))
        ax.bar(estaciones, visitas, color='#0078d7')
        ax.set_xticks(range(len(estaciones)))
        ax.set_xticklabels(estaciones, rotation=90)
        ax.set_xlabel("Estaci√≥n")
        ax.set_ylabel("N√∫mero de visitas")
        ax.set_title("Frecuencia de estaciones visitadas en la simulaci√≥n")
        st.pyplot(fig)

        st.markdown('''
        **Interpretaci√≥n:**

        - Esta simulaci√≥n muestra la trayectoria posible de incidentes en el Metro seg√∫n la matriz seleccionada.
        - Las barras indican qu√© estaciones son m√°s visitadas o con mayor probabilidad en la trayectoria.
        - En vigilancia m√≥vil, la probabilidad en estaciones reforzadas se reduce, cambiando la trayectoria.
        ''')

        csv = pd.DataFrame({'Paso': range(1, pasos + 1), 'Estaci√≥n': secuencia})
        csv_file = csv.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="‚¨áÔ∏è Descargar secuencia como CSV",
            data=csv_file,
            file_name="simulacion_metro.csv",
            mime="text/csv"
        )

st.markdown("---")
st.markdown('<footer>üìä <b>Simulaci√≥n desarrollada por estudiantes LCDN</b> ‚Äî Ciencia de Datos, Metro CDMX 2025 üöá</footer>', unsafe_allow_html=True)
