import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter

# Funci√≥n para cargar matrices con cache para optimizar rendimiento
@st.cache_data
def cargar_matriz(nombre_archivo):
    return pd.read_csv(nombre_archivo, index_col=0)

# T√≠tulo principal
st.title("üöá Simulador de Delitos en el Metro CDMX con Cadenas de Markov")
st.markdown("---")
# Instrucciones
st.markdown('''
Este simulador muestra c√≥mo podr√≠an evolucionar los incidentes delictivos CON violencia y SIN violencia en el Metro de la CDMX a trav√©s de cadenas de Markov.
Puedes comparar distintos escenarios:

üîµ **Escenario base:**
Muestra c√≥mo se mover√≠an los incidentes delictivos en el Metro de manera natural, usando solo los datos hist√≥ricos actuales, sin ninguna intervenci√≥n.

üëÆ‚Äç‚ôÇÔ∏è **Con refuerzo policial:**
La simulaci√≥n muestra cu√°les estaciones son las m√°s probables de tener incidentes, incluso despu√©s de aplicar vigilancia fija en las estaciones m√°s peligrosas. Esto refleja que, aunque haya polic√≠a reforzando ciertas estaciones, algunas siguen siendo puntos cr√≠ticos.

üöì **Vigilancia m√≥vil:**
Esta estrategia simula que la polic√≠a se mueve constantemente, anticip√°ndose a las zonas donde el riesgo de incidentes est√° aumentando, para intervenir antes de que se vuelvan peligrosas. As√≠, la vigilancia no est√° fija en un solo lugar, sino que se adapta y se desplaza seg√∫n la situaci√≥n.

üß†El modelo generar√° una secuencia de estaciones basada en una cadena de Markov.
''')

# Carga cacheada de matrices
matriz_violencia = cargar_matriz("matriz_transicion_violencia.csv")
matriz_violencia_refuerzo = cargar_matriz("matriz_transicion_violencia_refuerzo.csv")
matriz_violencia_refuerzo_b = cargar_matriz("matriz_violencia_refuerzo_b.csv")

matriz_sin_violencia = cargar_matriz("matriz_transicion_sin_violencia.csv")
matriz_sin_violencia_refuerzo = cargar_matriz("matriz_transicion_sin_violencia_refuerzo.csv")
matriz_sin_violencia_refuerzo_b = cargar_matriz("matriz_sin_violencia_refuerzo_b.csv")

# Listas de estaciones con media/alta peligrosidad
estaciones_media_alta_cv = ['Agr√≠cola Oriental', 'Allende', 'Apatlaco', 'Auditorio', 'Balbuena', 'Buenavista', 'Centro M√©dico', 'Cerro de la Estrella', 'Chilpancingo', 'Ciudad Deportiva', 'Constituci√≥n de 1917', 'Divisi√≥n del Norte', 'Fray Servando', 'General Anaya', 'Insurgentes', 'Moctezuma', 'Observatorio', 'Potrero', 'Puebla', 'Refiner√≠a', 'Revoluci√≥n', 'Ricardo Flores Mag√≥n', 'Santa Anita', 'Tasque√±a', 'Tepalcates', 'Vallejo', 'Villa de Arag√≥n', 'Xola']
estaciones_media_alta_sv = ['Barranca del Muerto', 'Camarones', 'Chapultepec', 'Copilco', 'Coyoac√°n', 'Coyuya', 'Divisi√≥n del Norte', 'Gomez Far√≠as', 'Guelatao', 'Instituto del Petr√≥leo', 'Insurgentes Sur', 'Isabel La Cat√≥lica', 'Iztacalco', 'Jamaica', 'Ju√°rez', 'Lagunilla', 'Mart√≠n Carrera', 'Miguel √Ångel de Quevedo', 'Moctezuma', 'Morelos', 'Nativitas', 'Normal', 'Observatorio', 'Portales', 'Puebla', 'San Joaqu√≠n', 'San Juan de Letr√°n', 'San Pedro de Los Pinos', 'Sevilla', 'Tepalcates', 'Tlatelolco', 'Universidad', 'Viaducto', 'Villa de Arag√≥n', 'Xola', 'Zaragoza']

# Funciones de simulaci√≥n
def simular_cadena_markov(P, estado_inicial, n_pasos):
    estados = [estado_inicial]
    for _ in range(n_pasos - 1):
        estado_actual = estados[-1]
        distribucion = P.loc[estado_actual]
        siguiente_estado = np.random.choice(distribucion.index, p=distribucion.values)
        estados.append(siguiente_estado)
    return estados

def simular_cadena_markov_movil(P, estado_inicial, n_pasos, estaciones_refuerzo):
    estados = [estado_inicial]
    for _ in range(n_pasos - 1):
        estado_actual = estados[-1]
        distribucion = P.loc[estado_actual].copy()
        for est in estaciones_refuerzo:
            if est in distribucion.index:
                distribucion[est] *= 0.5
        distribucion /= distribucion.sum()
        siguiente_estado = np.random.choice(distribucion.index, p=distribucion.values)
        estados.append(siguiente_estado)
    return estados

# Interfaz de usuario
tipo_delito = st.radio("**Selecciona el tipo de incidente:**", ["CON violencia", "SIN violencia"])
tipo_simulacion = st.radio("**Selecciona el tipo de simulaci√≥n:**", ["Escenario base", "Con refuerzo policial", "Vigilancia m√≥vil"])

if tipo_delito == "CON violencia":
    estaciones_disponibles = matriz_violencia.index.tolist()
else:
    estaciones_disponibles = matriz_sin_violencia.index.tolist()

estacion_inicio = st.selectbox("üìç Selecciona estaci√≥n de inicio:", estaciones_disponibles)
pasos = st.slider("üî¢ N√∫mero de pasos a simular:", min_value=5, max_value=50, value=20)

# Selecci√≥n de matriz y funci√≥n
if tipo_delito == "CON violencia":
    if tipo_simulacion == "Escenario base":
        matriz = matriz_violencia
        sim_func = simular_cadena_markov
    elif tipo_simulacion == "Con refuerzo policial":
        matriz = matriz_violencia_refuerzo
        sim_func = simular_cadena_markov
    else:
        matriz = matriz_violencia_refuerzo_b
        sim_func = simular_cadena_markov_movil
        refuerzo_estaciones = estaciones_media_alta_cv
else:
    if tipo_simulacion == "Escenario base":
        matriz = matriz_sin_violencia
        sim_func = simular_cadena_markov
    elif tipo_simulacion == "Con refuerzo policial":
        matriz = matriz_sin_violencia_refuerzo
        sim_func = simular_cadena_markov
    else:
        matriz = matriz_sin_violencia_refuerzo_b
        sim_func = simular_cadena_markov_movil
        refuerzo_estaciones = estaciones_media_alta_sv

# Simulaci√≥n al presionar bot√≥n
if st.button("Simular"):
    if tipo_simulacion == "Vigilancia m√≥vil":
        secuencia = sim_func(matriz, estacion_inicio, pasos, refuerzo_estaciones)
    else:
        secuencia = sim_func(matriz, estacion_inicio, pasos)

    st.write(f"### üîÑ Simulaci√≥n: {tipo_delito} - {tipo_simulacion}")
    for i, est in enumerate(secuencia, 1):
        st.write(f"{i}: {est}")

    frecuencia = Counter(secuencia)
    estaciones = list(frecuencia.keys())
    visitas = list(frecuencia.values())

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.bar(estaciones, visitas, color='#87CEEB')
    ax.set_xticks(range(len(estaciones)))
    ax.set_xticklabels(estaciones, rotation=90)
    ax.set_xlabel("Estaci√≥n")
    ax.set_ylabel("N√∫mero de visitas")
    ax.set_title("Frecuencia de estaciones visitadas en la simulaci√≥n")
    st.pyplot(fig)

    st.markdown('''
    *Interpretaci√≥n:*

    - Esta simulaci√≥n muestra la trayectoria posible de incidentes en el Metro seg√∫n la matriz seleccionada.
    - Las barras indican qu√© estaciones son m√°s visitadas o con mayor probabilidad en el recorrido.
    - En el caso de vigilancia m√≥vil, la probabilidad de visitar estaciones reforzadas se reduce, cambiando la trayectoria.
    ''')
# Opci√≥n para descargar CSV con la secuencia
    csv = pd.DataFrame({'Paso': range(1, pasos + 1), 'Estaci√≥n': secuencia})
    csv_file = csv.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="‚¨áÔ∏è Descargar secuencia como CSV",
        data=csv_file,
        file_name="simulacion_metro.csv",
        mime="text/csv"
    )

st.markdown("---")
st.markdown("üìä *Simulaci√≥n desarrollada por estudiantes LCDN* ‚Äî Ciencia de Datos, Metro CDMX 2025 üöá")
